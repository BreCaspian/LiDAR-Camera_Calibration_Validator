# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2025 Yao Yuzhuo (yaoyuzhuo6@gmail.com)
# This file is part of LiDAR-Camera Calibration Validator and is licensed under
# the GNU General Public License v3.0 or later. See the LICENSE file for details.

PACKAGE = "lidar_cam_validator"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
control_group = gen.add_group("Control")

control_group.add("reset_to_defaults", bool_t, 0,
                 "Reset all parameters to default values",
                 False)

visualization_group = gen.add_group("Visualization")

visualization_group.add("point_size", int_t, 0,
                       "Point size in pixels",
                       3, 1, 8)

visualization_group.add("min_depth", double_t, 0,
                       "Min depth for color mapping (meters)",
                       0.5, 0.1, 5.0)

visualization_group.add("max_depth", double_t, 0,
                       "Max depth for color mapping (meters)",
                       50.0, 5.0, 200.0)

visualization_group.add("show_statistics", bool_t, 0,
                       "Show statistics overlay",
                       True)

visualization_group.add("show_edge_overlay", bool_t, 0,
                       "Show edge detection overlay",
                       False)

visualization_group.add("show_depth_colorbar", bool_t, 0,
                       "Show depth color bar",
                       True)

performance_group = gen.add_group("Performance")

performance_group.add("enable_downsampling", bool_t, 0,
                     "Enable point cloud downsampling",
                     False)

performance_group.add("max_points", int_t, 0,
                     "Max points to process",
                     1000000, 10000, 1000000)

filtering_group = gen.add_group("Filtering")

filtering_group.add("filter_by_distance", bool_t, 0,
                   "Enable distance filtering",
                   True)

filtering_group.add("min_distance", double_t, 0,
                   "Min distance filter (meters)",
                   0.3, 0.1, 2.0)

filtering_group.add("max_distance", double_t, 0,
                   "Max distance filter (meters)",
                   100.0, 10.0, 200.0)

metrics_group = gen.add_group("Metrics")

metrics_group.add("enable_metrics", bool_t, 0,
                 "Enable metric calculations",
                 True)

metrics_group.add("edge_threshold", int_t, 0,
                 "Canny edge detection threshold",
                 50, 10, 200)

metrics_group.add("edge_distance_threshold", double_t, 0,
                 "Max distance to edge for overlap score (pixels)",
                 5.0, 1.0, 20.0)

metrics_group.add("min_points_for_nmi", int_t, 0,
                 "Min points for NMI calculation",
                 100, 50, 1000)

exit(gen.generate(PACKAGE, "validator_node", "Validator"))

